import random
import matplotlib.pyplot as plt
import numpy as np

class Parques:
    def __init__(self): # Inicio del juego
        self.tablero = [None] * 68  # Casillas numeradas
        self.equipos = {"rojo": [], "azul": [], "verde": [], "amarillo": []}  # Equipos
        self.carcel = {"rojo": 4, "azul": 4, "verde": 4, "amarillo": 4}  # Fichas en la cárcel
        self.salidas = {"rojo": 5, "azul": 22, "verde": 39, "amarillo": 56}  # Posiciones de salida
        self.llegada = {"rojo": [60, 61, 62, 63], "azul": [61, 62, 63, 64], "verde": [62, 63, 64, 65], "amarillo": [63, 64, 65, 66]}  # Posiciones de llegada
        self.turno = ["rojo", "azul", "verde", "amarillo"] # Asignación de turnos
        self.dados = (1, 1)
        self.recorrido_completo = {"rojo": [], "azul": [], "verde": [], "amarillo": []}  # Para fichas que han dado la vuelta completa

    def lanzar_dados(self): # Simulación del lanzamiento de dos dados
        return random.randint(1, 6), random.randint(1, 6) # Se usa la libreria random para la obtención de números aleatorios al lanzar los dados

    def jugar_turno(self, equipo):
        input(f"Presiona Enter para que {equipo} lance los dados...") # Lanzamiento de los dados
        dado1, dado2 = self.lanzar_dados()
        print(f"{equipo} lanzó {dado1} y {dado2}")

        if dado1 == dado2:
            print(f"{equipo} sacó par y pierde el turno") #Pierde turno si saca par
            return

        movimientos = [dado1 + dado2]
        if 5 in (dado1, dado2, dado1 + dado2) and self.carcel[equipo] > 0: #Si saca 5 sale una ficha de la cárcel
            self.carcel[equipo] -= 1
            print(f"{equipo} sacó un 5 y libera una ficha de la cárcel")
            self.equipos[equipo].append(self.salidas[equipo])
            movimientos.append(0)

        fichas_a_mover = min(2, len(self.equipos[equipo])) #Mover las fichas de acuerdo a la suma de los dados
        for i in range(fichas_a_mover):
            if not movimientos:
                break
            ficha_a_mover = self.equipos[equipo][i]
            nueva_posicion = (ficha_a_mover + movimientos.pop(0)) % 68

            if ficha_a_mover < self.salidas[equipo] and nueva_posicion >= self.salidas[equipo]: #Registro de que una ficha ha completado todo el tablero
                self.recorrido_completo[equipo].append(ficha_a_mover)

            if ficha_a_mover in self.recorrido_completo[equipo] and nueva_posicion in self.llegada[equipo]: #Si todas las fichas de un equipo llegan a la meta, el equipo gana y se termina el juego
                print(f"Ficha de {equipo} ha llegado a la meta en {nueva_posicion}")
                self.equipos[equipo][i] = nueva_posicion
            else:
                print(f"Ficha de {equipo} se mueve de {ficha_a_mover} a {nueva_posicion}")
                self.equipos[equipo][i] = nueva_posicion

        if all(pos in self.llegada[equipo] for pos in self.equipos[equipo]) and len(self.equipos[equipo]) == 4:
            print(f"El equipo {equipo} ha ganado el juego!")
            exit()

    def dibujar_tablero(self): # Graficación del tablero
        fig, ax = plt.subplots(figsize=(8, 8)) # Se usa la libreria matplotlib.pyplot
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 10)
        ax.set_xticks(np.arange(0, 11, 1)) # Se usa la libreria numpy para generar las divisiones del tablero
        ax.set_yticks(np.arange(0, 11, 1))
        ax.grid(True, which='both', linestyle='--', linewidth=0.5) # Dibujar líneas de la cuadrícula
        colores = {"rojo": "red", "azul": "blue", "verde": "green", "amarillo": "yellow"}

        for equipo, fichas in self.equipos.items():
            for ficha in fichas:
                x = (ficha % 10) + 0.5
                y = (ficha // 10) + 0.5
                ax.scatter(x, y, c=colores[equipo], s=200)

        plt.show()

    def iniciar_juego(self): # Se inicia el juego
        while True:
            for equipo in self.turno: # Iteración de los equipos en orden
                self.jugar_turno(equipo) # Cada equipo lanza los dados
                self.dibujar_tablero() # Actualización del tablero por turno
                input("Presiona Enter para continuar...")

# Iniciar el juego
ejuego = Parques()
ejuego.iniciar_juego()
